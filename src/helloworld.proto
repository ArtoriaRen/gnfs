// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.helloworld";
option java_outer_classname = "HelloWorldProto";
option objc_class_prefix = "HLW";

package helloworld;

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}
  rpc grpc_mkdir (Request) returns (Errno) {}
  rpc grpc_getattr (Path) returns (Stbuf) {}
  rpc grpc_readdir (Path) returns (stream Directory) {}
  rpc grpc_write (WriteRequest) returns (WriteBytes) {}
 // rpc grpc_readdir (Path) returns (stream Directory) {} 
  rpc grpc_open (PathFlags) returns (FileHandle) {} 
  rpc grpc_read (ReadReq) returns (Buffer) {}
  rpc grpc_flush (FlushReq) returns (Errno) {}
  rpc grpc_unlink (Path) returns (Errno) {}
  rpc grpc_rename (RenameReq) returns (Errno) {}
  rpc grpc_rmdir (Path) returns (Errno) {}
  rpc grpc_release (ReleaseReq) returns (Errno) {}
  rpc grpc_create (CreateReq) returns (Errno) {}
  rpc grpc_utimens (UtimeReq) returns (Errno) {}
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}

message CreateReq {
    string path = 1;
    int32 mode = 2;
    int32 flag = 3;
}

message RenameReq {
  string from = 1;
  string to = 2;
  int32 flags=3;
}

message Path {
  string path = 1;
}

message Stbuf {
  uint32 stmode = 1;
  uint64 stnlink = 2;
  sint64 stsize = 3;
  int32 err=4;
}

message Directory {
  string dname = 1;
  uint32 dino = 2;
  uint32 dtype = 3;
  int32 err=4;
}

message Request {
  string path = 1;
  int32 mode=2;
}

message Errno {
  int32 err=1;
}

message WriteBytes {
  int32 nbytes = 1;
}

message WriteRequest {
  string path = 1;
  bytes buffer = 2;
  int32 size = 3;
  int32 offset = 4;
  int32 fh = 5;
}

message FlushReq {
  string path = 1;
  int32 fh = 2;
}

message PathFlags{
  string path = 1;
  int32 flags = 2;
}

message FileHandle{
  int32 fh = 1;
}

message ReadReq{
  string path = 1;
  int32 size = 2;
  int32 offset = 3;
  int32 fh = 4;
}

message Buffer{
  bytes buffer = 1;
  int32 nbytes = 2;
}

message ReleaseReq{
    string path = 1;
    int32 fh = 2;
}

message UtimeReq {
    string path = 1;
    uint32 at = 2;
    uint32 mt = 3;
}

message Empty{
}

